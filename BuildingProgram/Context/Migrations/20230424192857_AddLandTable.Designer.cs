// <auto-generated />
using System;
using BuildingProgram.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BuildingProgram.Context.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230424192857_AddLandTable")]
    partial class AddLandTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BuildingProgram.Models.BuildingObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BuildingStatus")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<bool>("IsBuildPermit")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBuildingEnded")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ObjectNumber")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartActual")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartPlanned")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BuildingObjects");
                });

            modelBuilder.Entity("BuildingProgram.Models.Land", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("BuyerId")
                        .HasColumnType("integer");

                    b.Property<string>("CadastralNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSold")
                        .HasColumnType("boolean");

                    b.Property<int?>("LandType")
                        .HasColumnType("integer");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer");

                    b.Property<double>("Square")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Lands");
                });

            modelBuilder.Entity("BuildingProgram.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("BuildingProgram.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BuildingProgram.Models.BuildingObject", b =>
                {
                    b.HasOne("BuildingProgram.Models.User", null)
                        .WithMany("BuildingObjects")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BuildingProgram.Models.Land", b =>
                {
                    b.HasOne("BuildingProgram.Models.Organization", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("BuildingProgram.Models.Organization", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("BuildingProgram.Models.User", b =>
                {
                    b.Navigation("BuildingObjects");
                });
#pragma warning restore 612, 618
        }
    }
}
